Script started on Sat 03 Oct 2015 11:09:31 AM PDT
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm Hello.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ lddd -0 H[K[K[Ko Hello.o[K[K[K[K[K[K[K[K[K[K[K Hello.o -l[Ko Hello
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ blitz -g Hello
Beginning execution...
Hello, world!

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
000080: A1FFFFB8       jmp     0xFFFFB8		! targetAddr = main

Entering machine-level debugger...
======================================================
=====                                            =====
=====         The BLITZ Machine Emulator         =====
=====                                            =====
=====  Copyright 2001-2007, Harry H. Porter III  =====
=====                                            =====
======================================================

Enter a command at the prompt.  Type 'quit' to exit or 'help' for
info about commands.
> q
Number of Disk Reads    = 0
Number of Disk Writes   = 0
Instructions Executed   = 1705
Time Spent Sleeping     = 0
    Total Elapsed Time  = 1705
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm Echo.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ lddd Oc[K[KEcho.o -o Echo
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ g[Kblitz Echo
======================================================
=====                                            =====
=====         The BLITZ Machine Emulator         =====
=====                                            =====
=====  Copyright 2001-2007, Harry H. Porter III  =====
=====                                            =====
======================================================

Enter a command at the prompt.  Type 'quit' to exit or 'help' for
info about commands.
> g
Beginning execution...
aaaa
aaaa
bbibbib
bbibbib
Hello hello
Hello hello
test 1234
test 1234
q
q
****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
                   cont:
0000A4: A1FFFFAC       jmp     0xFFFFAC		! targetAddr = loop
> go o
Beginning execution...

asdoij
asdoij
asdoij
asdoij
q
q
****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
                   cont:
0000A4: A1FFFFAC       jmp     0xFFFFAC		! targetAddr = loop
> q
Number of Disk Reads    = 0
Number of Disk Writes   = 0
Instructions Executed   = 411743060
Time Spent Sleeping     = 0
    Total Elapsed Time  = 411743060
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl -unsafe System
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm System.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl HelloWorld
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm HelloWorld.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm Runtime.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ lddd Runtim.[Ke.o System.o Hellow[KWorld.o o[K-o HelloWorld
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl System
System.h:30: *****  ERROR at PTR: Using 'ptr to void' is unsafe; you must compile with the 'unsafe' option if you wish to do this
System.h:31: *****  ERROR at PTR: Using 'ptr to void' is unsafe; you must compile with the 'unsafe' option if you wish to do this
System.h:32: *****  ERROR at PTR: Using 'ptr to void' is unsafe; you must compile with the 'unsafe' option if you wish to do this
System.c:64: *****  ERROR at "+": Adding ptrs to ints is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:92: *****  ERROR at PTR: Using 'ptr to void' is unsafe; you must compile with the 'unsafe' option if you wish to do this
System.c:100: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:113: *****  ERROR at "&": Taking the address of field within a record or object is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:113: *****  ERROR at "&": The expression on the righthand side of this assignment does not have the correct type
System.c:113:              The type of the expression is: ptr to ptr to DISPATCH_TABLE
System.c:92:              The expected type is: ptr to ptr to void
System.c:120: *****  ERROR at "+": Adding ptrs to ints is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:149: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:207: *****  ERROR at "&": Taking the address of an element within an array is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:208: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:208: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:212: *****  ERROR at "+": Adding ptrs to ints is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:246: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:253: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this
System.c:275: *****  ERROR at AS_PTR_TO: Using 'asPtrTo' is an unsafe operation; you must compile with the 'unsafe' option if you wish to do this

**********  17 errors detected!  **********
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl Systemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[KHelloWorld.s[2Pkpl HelloWorld[2Pasm System.skpl -unsafe System
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl -unsafe System[8PSystemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[KHelloWorld.s[2Pkpl HelloWorld[2Pasm System.skpl -unsafe System[6Pasm System.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm System.skpl -unsafe System[8PSystemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[KHelloWorld.s[2Pkpl HelloWorld[2Pasm System.skpl HelloWorld
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ kpl HelloWorld[2Pasm System.skpl -unsafe System[8PSystemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[KHelloWorld.s[3PRuntime.sHelloWorld.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm HelloWorld.s[2Pkpl HelloWorld[2Pasm System.skpl -unsafe System[8PSystemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[KHelloWorld.s[3PRuntime.s
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ asm Runtime.sHelloWorld.s[2Pkpl HelloWorld[2Pasm System.skpl -unsafe System[8PSystemlddd Runtime.o System.o HelloWorld.o -o HelloWorld[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Casm Runtime.s[Klddd Runtime.o System.o HelloWorld.o -o HelloWorld
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ blitz -g HelloWorld
Beginning execution...
====================  KPL PROGRAM STARTING  ====================
Hello, world...
The value of b is 12

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16

Entering machine-level debugger...
======================================================
=====                                            =====
=====         The BLITZ Machine Emulator         =====
=====                                            =====
=====  Copyright 2001-2007, Harry H. Porter III  =====
=====                                            =====
======================================================

Enter a command at the prompt.  Type 'quit' to exit or 'help' for
info about commands.
> g
Beginning execution...
The value of b is 13

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> q
Number of Disk Reads    = 0
Number of Disk Writes   = 0
Instructions Executed   = 694
Time Spent Sleeping     = 0
    Total Elapsed Time  = 694
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ make
make: Nothing to be done for `all'.
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ exit
exit

Script done on Sat 03 Oct 2015 11:15:35 AM PDT
Script started on Sat 03 Oct 2015 11:16:38 AM PDT
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ make
kpl HelloWorld
asm HelloWorld.s
lddd Runtime.o System.o HelloWorld.o -o HelloWorld
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ BlitzOnWindows_files/[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kblitz HelloWorld
======================================================
=====                                            =====
=====         The BLITZ Machine Emulator         =====
=====                                            =====
=====  Copyright 2001-2007, Harry H. Porter III  =====
=====                                            =====
======================================================

Enter a command at the prompt.  Type 'quit' to exit or 'help' for
info about commands.
> g
Beginning execution...
====================  KPL PROGRAM STARTING  ====================
Hello, world...
The value of b is 12

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> g
Beginning execution...
The value of b is 13

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> g
Beginning execution...
The value of b is 14

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> g
Beginning execution...
The value of b is 15

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> g
Beginning execution...
The value of b is 16

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> g
Beginning execution...
The value of b is 17

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> st
   Function/Method            Frame Addr   Execution at...
   ========================   ==========   =====================
   bar                         00FFFE3C    HelloWorld.c, line 20
   bar                         00FFFE58    HelloWorld.c, line 21
   bar                         00FFFE74    HelloWorld.c, line 21
   bar                         00FFFE90    HelloWorld.c, line 21
   bar                         00FFFEAC    HelloWorld.c, line 21
   bar                         00FFFEC8    HelloWorld.c, line 21
   foo                         00FFFEE0    HelloWorld.c, line 11
   main                        00FFFEF8    HelloWorld.c, line 7
Bottom of activation frame stack!
> fr
=====  Frame number 0 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 20
Frame Addr:       00FFFE3C
frameSize:        12
totalParmSize:    4
                         ==========
   sp--> -20   00FFFE28:  00000011
         -16   00FFFE2C:  00000011
         -12   00FFFE30:  0000906C
R.D.ptr:  -8   00FFFE34:  000028D0
    r13:  -4   00FFFE38:  00000015
     fp:   0   00FFFE3C:  00FFFE58
RetAddr:   4   00FFFE40:  000028B8
                         ==========
   Args:   8   00FFFE44:  00000010

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFE44:  00000010    value = 16
  _temp_15
         -12   00FFFE30:  0000906C
  b: int
         -16   00FFFE2C:  00000011    value = 17
=================================================
> down
=====  Frame number 1 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 21
Frame Addr:       00FFFE58
frameSize:        12
totalParmSize:    4
                         ==========
         -20   00FFFE44:  00000010
         -16   00FFFE48:  00000010
         -12   00FFFE4C:  0000906C
R.D.ptr:  -8   00FFFE50:  000028D0
    r13:  -4   00FFFE54:  00000015
     fp:   0   00FFFE58:  00FFFE74
RetAddr:   4   00FFFE5C:  000028B8
                         ==========
   Args:   8   00FFFE60:  0000000F

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFE60:  0000000F    value = 15
  _temp_15
         -12   00FFFE4C:  0000906C
  b: int
         -16   00FFFE48:  00000010    value = 16
=================================================
> down
=====  Frame number 2 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 21
Frame Addr:       00FFFE74
frameSize:        12
totalParmSize:    4
                         ==========
         -20   00FFFE60:  0000000F
         -16   00FFFE64:  0000000F
         -12   00FFFE68:  0000906C
R.D.ptr:  -8   00FFFE6C:  000028D0
    r13:  -4   00FFFE70:  00000015
     fp:   0   00FFFE74:  00FFFE90
RetAddr:   4   00FFFE78:  000028B8
                         ==========
   Args:   8   00FFFE7C:  0000000E

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFE7C:  0000000E    value = 14
  _temp_15
         -12   00FFFE68:  0000906C
  b: int
         -16   00FFFE64:  0000000F    value = 15
=================================================
> down
=====  Frame number 3 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 21
Frame Addr:       00FFFE90
frameSize:        12
totalParmSize:    4
                         ==========
         -20   00FFFE7C:  0000000E
         -16   00FFFE80:  0000000E
         -12   00FFFE84:  0000906C
R.D.ptr:  -8   00FFFE88:  000028D0
    r13:  -4   00FFFE8C:  00000015
     fp:   0   00FFFE90:  00FFFEAC
RetAddr:   4   00FFFE94:  000028B8
                         ==========
   Args:   8   00FFFE98:  0000000D

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFE98:  0000000D    value = 13
  _temp_15
         -12   00FFFE84:  0000906C
  b: int
         -16   00FFFE80:  0000000E    value = 14
=================================================
> down
=====  Frame number 4 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 21
Frame Addr:       00FFFEAC
frameSize:        12
totalParmSize:    4
                         ==========
         -20   00FFFE98:  0000000D
         -16   00FFFE9C:  0000000D
         -12   00FFFEA0:  0000906C
R.D.ptr:  -8   00FFFEA4:  000028D0
    r13:  -4   00FFFEA8:  00000015
     fp:   0   00FFFEAC:  00FFFEC8
RetAddr:   4   00FFFEB0:  000028B8
                         ==========
   Args:   8   00FFFEB4:  0000000C

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFEB4:  0000000C    value = 12
  _temp_15
         -12   00FFFEA0:  0000906C
  b: int
         -16   00FFFE9C:  0000000D    value = 13
=================================================
> down
=====  Frame number 5 (where StackTop = 0)  =====
Function Name:    bar
Filename:         HelloWorld.c
Execution now at: line 21
Frame Addr:       00FFFEC8
frameSize:        12
totalParmSize:    4
                         ==========
         -20   00FFFEB4:  0000000C
         -16   00FFFEB8:  0000000C
         -12   00FFFEBC:  0000906C
R.D.ptr:  -8   00FFFEC0:  000028D0
    r13:  -4   00FFFEC4:  0000000B
     fp:   0   00FFFEC8:  00FFFEE0
RetAddr:   4   00FFFECC:  000027B4
                         ==========
   Args:   8   00FFFED0:  0000000B

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  a: int
           8   00FFFED0:  0000000B    value = 11
  _temp_15
         -12   00FFFEBC:  0000906C
  b: int
         -16   00FFFEB8:  0000000C    value = 12
=================================================
> down
=====  Frame number 6 (where StackTop = 0)  =====
Function Name:    foo
Filename:         HelloWorld.c
Execution now at: line 11
Frame Addr:       00FFFEE0
frameSize:        8
totalParmSize:    4
                         ==========
         -16   00FFFED0:  0000000B
         -12   00FFFED4:  0000000B
R.D.ptr:  -8   00FFFED8:  000027CC
    r13:  -4   00FFFEDC:  00000007
     fp:   0   00FFFEE0:  00FFFEF8
RetAddr:   4   00FFFEE4:  00002710
                         ==========
   Args:   8   00FFFEE8:  0000000A

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  x: int
           8   00FFFEE8:  0000000A    value = 10
  _temp_11
         -12   00FFFED4:  0000000B
=================================================
> down
=====  Frame number 7 (where StackTop = 0)  =====
Function Name:    main
Filename:         HelloWorld.c
Execution now at: line 7
Frame Addr:       00FFFEF8
frameSize:        8
totalParmSize:    0
                         ==========
         -16   00FFFEE8:  0000000A
         -12   00FFFEEC:  00009084
R.D.ptr:  -8   00FFFEF0:  00002728
    r13:  -4   00FFFEF4:  00000000
     fp:   0   00FFFEF8:  00000000
RetAddr:   4   00FFFEFC:  00000CF0
                         ==========

PARAMETERS AND LOCAL VARIABLES WITHIN THIS FRAME:
=================================================
  _temp_8
         -12   00FFFEEC:  00009084
=================================================
> q
Number of Disk Reads    = 0
Number of Disk Writes   = 0
Instructions Executed   = 1034
Time Spent Sleeping     = 0
    Total Elapsed Time  = 1034
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ blitz HelloWorld
======================================================
=====                                            =====
=====         The BLITZ Machine Emulator         =====
=====                                            =====
=====  Copyright 2001-2007, Harry H. Porter III  =====
=====                                            =====
======================================================

Enter a command at the prompt.  Type 'quit' to exit or 'help' for
info about commands.
> help
===========================================================================
This program accepts commands typed into the terminal.  Each command
should be typed without any arguments; the commands will prompt for
arguments when needed.  Case is not significant.  Some abbreviations
are allowed, as shown.  Typing control-C will halt execution.

The available commands are:

  quit    - Terminate this program
  q         
  help    - Produce this display
  h         
  info    - Display the current state of the machine
  i         
  dumpMem - Display the contents of memory
  dm        
  setmem  - Used to alter memory contents
  fmem    - Display floating point values from memory
  go      - Begin or resume BLITZ instruction execution
  g         
  step    - Single step; execute one machine-level instruction
  s         
  t       - Single step; execute one KPL statement
  u       - Execute continuously until next KPL call, send, or return statement
  stepn   - Execute N machine-level instructions
  r       - Display all the integer registers
  r1      - Change the value of register r1
   ...       
  r15     - Change the value of register r15
  float   - Display all the floating-point registers
  f         
  f0      - Change the value of floating-point register f0
   ...       
  f15     - Change the value of floating-point register f15
  dis     - Disassemble several instructions
  d       - Disassemble several instructions from the current location
  hex     - Convert a user-entered hex number into decimal and ascii
  dec     - Convert a user-entered decimal number into hex and ascii
  ascii   - Convert a user-entered ascii char into hex and decimal
  setI    - Set the I bit in the Status Register
  setS    - Set the S bit in the Status Register
  setP    - Set the P bit in the Status Register
  setZ    - Set the Z bit in the Status Register
  setV    - Set the V bit in the Status Register
  setN    - Set the N bit in the Status Register
  clearI  - Clear the I bit in the Status Register
  clearS  - Clear the S bit in the Status Register
  clearP  - Clear the P bit in the Status Register
  clearZ  - Clear the Z bit in the Status Register
  clearV  - Clear the V bit in the Status Register
  clearN  - Clear the N bit in the Status Register
  setPC   - Set the Program Counter (PC)
  setPTBR - Set the Page Table Base Register (PTBR)
  setPTLR - Set the Page Table Length Register (PTLR)
  pt      - Display the Page Table
  trans   - Perform page table translation on a single address
  cancel  - Cancel all pending interrupts
  labels  - Display the label table
  find    - Find a label by name
  find2   - Find a label by value
  add     - Add a new label, inserting it into the indexes
  reset   - Reset the machine state and re-read the a.out file
  io      - Display the state of the I/O devices
  read    - Read a word from memory-mapped I/O region
  write   - Write a word to memory-mapped I/O region
  raw     - Switch serial input to raw mode
  cooked  - Switch serial input to cooked mode
  input   - Enter input characters for future serial I/O input
  format  - Create and format a BLITZ disk file
  sim     - Display the current simulation constants
  stack   - Display the KPL calling stack
  st        
  frame   - Display the current activation frame
  fr        
  up      - Move up in the activation frame stack
  down    - Move down in the activation frame stack

===========================================================================
> step
Done!  The next instruction to execute will be:
                   RuntimeStartup:
000CD8: C0F000FF       sethi   0x00FF,r15	! 0x00FFFF00 = 16776960
> step
Done!  The next instruction to execute will be:
000CDC: C1F0FF00       setlo   0xFF00,r15
> step
Done!  The next instruction to execute will be:
000CE0: C0100000       sethi   0x0000,r1	! 0x00000CF4 = 3316 (startupMessage)
> t
====================  KPL PROGRAM STARTING  ====================
About to execute FUNCTION ENTRY                    in KPLMemoryInitialize (System.c, line 147)  time = 453
> t
About to execute ASSIGN statement                  in KPLMemoryInitialize (System.c, line 150)  time = 458
> t
About to execute RETURN statement                  in KPLMemoryInitialize (System.c, line 150)  time = 466
> t
About to execute FUNCTION ENTRY                    in main (HelloWorld.c, line 5)  time = 486
> t
About to execute FUNCTION CALL (external function) in main (HelloWorld.c, line 6)  time = 493
> t
Hello, world...
About to execute FUNCTION CALL                     in main (HelloWorld.c, line 7)  time = 503
> t
About to execute FUNCTION ENTRY                    in foo (HelloWorld.c, line 10)  time = 519
> t
About to execute FUNCTION CALL                     in foo (HelloWorld.c, line 11)  time = 528
> t
About to execute FUNCTION ENTRY                    in bar (HelloWorld.c, line 14)  time = 547
> t
About to execute ASSIGN statement                  in bar (HelloWorld.c, line 16)  time = 549
> t
About to execute FUNCTION CALL (external function) in bar (HelloWorld.c, line 17)  time = 561
> t
The value of b is 12About to execute FUNCTION CALL                     in bar (HelloWorld.c, line 19)  time = 578
> t
About to execute FUNCTION ENTRY                    in nl (System.c, line 48)  time = 591
> i
============================
Memory size = 0x01000000     ( decimal: 16777216    )
Page size   = 0x00002000     ( decimal: 8192        )
.text Segment
    addr    = 0x00000000     ( decimal: 0           )
    size    = 0x00004000     ( decimal: 16384       )
.data Segment
    addr    = 0x00004000     ( decimal: 16384       )
    size    = 0x00006000     ( decimal: 24576       )
.bss Segment
    addr    = 0x0000A000     ( decimal: 40960       )
    size    = 0x00000000     ( decimal: 0           )
=====  USER REGISTERS  =====
  r0  = 0x00000000     ( decimal: 0 )
  r1  = 0x00000000     ( decimal: 0 )
  r2  = 0x00000000     ( decimal: 0 )
  r3  = 0x00000000     ( decimal: 0 )
  r4  = 0x00000000     ( decimal: 0 )
  r5  = 0x00000000     ( decimal: 0 )
  r6  = 0x00000000     ( decimal: 0 )
  r7  = 0x00000000     ( decimal: 0 )
  r8  = 0x00000000     ( decimal: 0 )
  r9  = 0x00000000     ( decimal: 0 )
  r10 = 0x00000000     ( decimal: 0 )
  r11 = 0x00000000     ( decimal: 0 )
  r12 = 0x00000000     ( decimal: 0 )
  r13 = 0x00000000     ( decimal: 0 )
  r14 = 0x00000000     ( decimal: 0 )
  r15 = 0x00000000     ( decimal: 0 )
=====  SYSTEM REGISTERS  =====
  r0  = 0x00000000     ( decimal: 0 )
  r1  = 0x00000000     ( decimal: 0 )
  r2  = 0x0000000C     ( decimal: 12              SerialInterrupt )
  r3  = 0x00000012     ( decimal: 18          )
  r4  = 0x8CC97375     ( decimal: -1932954763 )
  r5  = 0x00000000     ( decimal: 0 )
  r6  = 0x00000000     ( decimal: 0 )
  r7  = 0x00000000     ( decimal: 0 )
  r8  = 0x00000000     ( decimal: 0 )
  r9  = 0x00000000     ( decimal: 0 )
  r10 = 0x00004655     ( decimal: 18005       )
  r11 = 0x00000000     ( decimal: 0 )
  r12 = 0x00000000     ( decimal: 0 )
  r13 = 0x00000030     ( decimal: 48          ascii: '0'     ExceptionDuringInterrupt )
  r14 = 0x00FFFEAC     ( decimal: 16776876    )
  r15 = 0x00FFFEA0     ( decimal: 16776864    )
=====  FLOATING-POINT REGISTERS  =====
  f0  = 0x00000000 00000000   ( value = 0 )
  f1  = 0x00000000 00000000   ( value = 0 )
  f2  = 0x00000000 00000000   ( value = 0 )
  f3  = 0x00000000 00000000   ( value = 0 )
  f4  = 0x00000000 00000000   ( value = 0 )
  f5  = 0x00000000 00000000   ( value = 0 )
  f6  = 0x00000000 00000000   ( value = 0 )
  f7  = 0x00000000 00000000   ( value = 0 )
  f8  = 0x00000000 00000000   ( value = 0 )
  f9  = 0x00000000 00000000   ( value = 0 )
  f10 = 0x00000000 00000000   ( value = 0 )
  f11 = 0x00000000 00000000   ( value = 0 )
  f12 = 0x00000000 00000000   ( value = 0 )
  f13 = 0x00000000 00000000   ( value = 0 )
  f14 = 0x00000000 00000000   ( value = 0 )
  f15 = 0x00000000 00000000   ( value = 0 )
======================================
  PC   = 0x00001274     ( decimal: 4724        )
  PTBR = 0x00000000     ( decimal: 0 )
  PTLR = 0x00000000     ( decimal: 0 )
                        ---- ----  ---- ----  ---- ----  --IS PZVN
  SR   = 0x00000010  =  0000 0000  0000 0000  0000 0000  0001 0000
           I = 0   Interrupts Disabled
           S = 1   System Mode
           P = 0   Paging Disabled
           Z = 0   Not Zero
           V = 0   No Overflow
           N = 0   Not Negative
==============================
  Pending Interrupts                = 0x00000002
    TIMER_INTERRUPT
  System Trap Number                = 0x00000000
  Page Invalid Offending Address    = 0x00000000
  Page Readonly Offending Address   = 0x00000000
  Time of next timer event          = 5005
  Time of next disk event           = 2147483647
  Time of next serial in event      = 30039
  Time of next serial out event     = 2147483647
    Current Time                    = 591
    Time of next event              = 5005
    Time Spent Sleeping             = 0
      Instructions Executed         = 591
  Number of Disk Reads              = 0
  Number of Disk Writes             = 0
==============================
The next instruction to execute will be:
001274: 8710000A       or      r0,0x000A,r1	! decimal: 10, ascii: ".."  
About to execute FUNCTION ENTRY                    in nl (System.c, line 48)  time = 591
> reset
Resetting all CPU registers and re-reading file "HelloWorld"...
> g
Beginning execution...
====================  KPL PROGRAM STARTING  ====================
Hello, world...
The value of b is 12

****  A 'debug' instruction was encountered  *****
Done!  The next instruction to execute will be:
0028A4: 8B1EFFF0       load    [r14+0xFFF0],r1	! decimal: -16
> format
================================================================================
This command is used to create or modify a file to be used by the BLITZ emulator
for the disk.  By default, this file will be called "DISK".  The filename may
be specified on the emulator command line with the "-d filename" option.  This
command will create the file if it does not exist.  It will set the file to the
desired size and initialize all newly allocated space.

The size of the disk file is an integral number of tracks.  Each track will
contain 16 sectors.  The size of each sector is the same as the page size.
Thus, the sector size is 8192 bytes.  The actual file size will be the number
tracks times the number of sectors per track times the sector size, plus an
additional 4 bytes, which will contain a "magic number".  The magic number
is 0x424C5A64 (decimal: 1112300132, ASCII: "BLZd") and is used to identify this
file as a BLITZ disk file.

Initialization consists of writing the magic number in the first 4 bytes of the
file and adjusting the file length.  Any data previously stored in the file will
be preserved and any additional sectors created will be initialized.
================================================================================

The name of the disk file is "DISK".
The file "DISK" existed previously.
    Old File Length = 131076 bytes
    Old Sector Count = 16
    Old Track Count = 1
Enter the number of tracks (e.g., 1000; type 0 to abort):
21  1
Desired number of tracks = 1
  New number of sectors = 16
  New number of tracks = 1
  New number of data bytes = 131072
    The magic number will consume 4 additional bytes.
File length changed to 131076 bytes.
Successful completion.
> q
Number of Disk Reads    = 0
Number of Disk Writes   = 0
Instructions Executed   = 609
Time Spent Sleeping     = 0
    Total Elapsed Time  = 609
]0;matthew@matthew-Aspire-E1-572: p1matthew@matthew-Aspire-E1-572:p1$ exit
exit

Script done on Sat 03 Oct 2015 11:19:39 AM PDT
